<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间，为了对SQL语句进行隔离，方便管理，mapper可开发dao方式，使用namespace有特殊作用 
mapper代理开发时将namespace指定为mapper接口的全限定名 -->
<mapper namespace="com.soecode.lyf.dao.UserrMapper">
    <!-- 在mapper.xml文件中配置很多的SQL语句，执行每个SQL语句时，封装为MappedStatement对象
    mapper.xml以statement为单位管理SQL语句
     -->

    <!-- 将用户查询条件定义为SQL片段
    建议对单表的查询条件单独抽取成SQL片段，提高公用性
    注意：不要讲where标签放在SQL片段,因为where条件中可能有多个SQL片段进行结合
     -->
    <sql id="query_user_where">
        <!-- 如果userQueryVo中传入查询条件，在进行SQL拼接 -->
        <!-- test中userCustom.username表示从userQueryVo中读取属性值 -->
        <if test="userCustom!=null">
            <if test="userCustom.username!=null and userCustom.username.trim().length() > 0">
                and username like '%${userCustom.username.trim()}%'
            </if>
            <if test="userCustom.sex!=null and userCustom.sex!=''">
                and sex = #{userCustom.sex}
            </if>
            <!-- 根据id集合查询用户信息 -->
            <!-- 最终拼接的效果：
            SELECT id,username,birthday FROM USER WHERE username LIKE '%小明%' AND id IN (16,22,25)
            collection: pojo中的表示集合的属性
            open: 开始循环拼接的串
            close: 结束循环拼接的串
            item: 每次循环从集合中取到的对象
            separator: 没两次循环中间拼接的串
             -->
            <if test="ids != null and ids.size()>0">
                <foreach collection="ids" open=" AND id IN (" close=")" item="id" separator=",">
                    #{id}
                </foreach>
            </if>
            <!--
                SELECT id ,username ,birthday  FROM USER WHERE username LIKE '%小明%' AND (id = 16 OR id = 22 OR id = 25)
             <foreach collection="ids" open=" AND id IN (" close=")" item="id" separator=" OR ">
                 id=#{id}
             </foreach>
             -->
            <!-- 还可以添加更多的查询条件 -->

        </if>
    </sql>

    <!-- 定义resultMap，列名和属性名映射配置
    id: mapper.xml中唯一标识
    type: 最终要映射的pojo类型
     -->
    <resultMap id="userListResultMap" type="com.soecode.lyf.entity.Userr">
        <!-- 列名
        id,username_,birthday_
        id:要映射结果集的唯一标识，称为主键
        column: 结果集的列名
        property:type指定pojo中的某个属性
        -->
        <id column="id_" property="id"/>
        <!-- result就是普通列的映射配置 -->
        <result column="username_" property="username"/>
        <result column="birthday_" property="birthday"/>
    </resultMap>

    <!-- 根据id查询用户信息 -->
    <!--
       id: 唯一标识一个statement
       #{}：表示一个占位符，如果#{} 中传入简单类型的参数，#{}中的名称随意
       parameterType: 输入参数的类型，通过#{}接收parameterType输入的参数
       resultType：输出结果类型，不管返回是多条还是单条，指定单条记录映射的pojo类型
     -->
    <select id="findUserById" parameterType="int" resultType="com.soecode.lyf.entity.Userr">
	     SELECT * FROM USER WHERE id=#{id};
	  </select>

    <!-- 根据用户名称查询用户信息，可能返回多条
    ${}:表示SQL的拼接，通过${}接收参数，将参数的内容不加任何修饰的拼接在SQL中
    -->
    <select id="findUserByName" parameterType="java.lang.String" resultType="com.soecode.lyf.entity.Userr">
	       select * from user where username like '%${value}%'
	  </select>

    <!-- <select id="findUserByName" parameterType="java.lang.String" resultType="test.lx.mybatis.po.User">
         select * from user where username like #{username}
    </select> -->

    <!-- 自定义查询条件查询用户信息
    parameterType: 指定包装类型
    %${userCustom.username}%: userCustom是userQueryVo中的属性，通过OGNL获取属性的值
    -->
    <select id="findUserList" parameterType="userQueryVo" resultType="userr">
        select * from user
        <!-- where标签相当于where关键字，可以自动除去第一个and -->
        <where>
            <!-- 引用sql片段，如果sql片段和引用处不在同一个mapper 必须在前边加namespace. -->
            <include refid="query_user_where"></include>
            <!-- 下边还有很多其它的条件 -->
            <!-- <include refid="其它的sql片段"></include> -->
        </where>
    </select>

    <!-- 使用resultMap作为结果映射
    resultMap: 如果引用resultMap的位置和resultMap的定义在同一个mapper.xml中，
    直接使用resultMap的id,如果不在同一个mapper.xml中，要在引用resultMap的id前边加namespace
     -->
    <select id="findUserListResultMap" parameterType="userQueryVo" resultMap="userListResultMap">
	  	select id id_,username username_,birthday birthday_ from user where
	  	username like '%${userCustom.username}%'
	  </select>

    <!-- 输出简单类型
    功能：自定义查询条件，返回查询记录个数，通常用于实现查询分页
     -->
    <select id="findUserCount" parameterType="userQueryVo" resultType="int">
        select count(*) from user
        <!-- where标签相当于where关键字，可以自动除去第一个and -->
        <where>
            <!-- 引用sql片段，如果sql片段和引用处不在同一个mapper 必须在前边加namespace. -->
            <include refid="query_user_where"></include>
            <!-- 下边还有很多其它的条件 -->
            <!-- <include refid="其它的sql片段"></include> -->
        </where>
    </select>

    <!-- 添加用户
     parameterType:输入参数的类型，User对象包括username,birthday,sex,address
     #{}接收pojo数据,可以使用OGNL解析出pojo的属性值
     #{username}表示从parameterType中获取pojo的属性值
     <selectKey>:用于进行主键返回，定义了主键值的SQL
     order：设置selectKey标签中SQL的执行顺序，相对于insert语句而言
     keyProperty： 将主键设置到哪个属性上
     resultType：select LAST_INSERT_ID()的结果类型
    -->
    <insert id="insertUser" parameterType="com.soecode.lyf.entity.Userr">
        <selectKey keyProperty="id" order="AFTER" resultType="int">
            select LAST_INSERT_ID()
        </selectKey>
        INSERT INTO USER(username,birthday,sex,address)
        VALUES(#{username},#{birthday},#{sex},#{address})
    </insert>

    <!-- mysql的uuid()函数生成主键 -->
    <!--  <insert id="insertUser" parameterType="test.lx.mybatis.po.User">
        <selectKey keyProperty="id" order="BEFORE" resultType="string">
           select uuid()
        </selectKey>
         INSERT INTO USER(username,birthday,sex,address) VALUES(#{username},#{birthday},#{sex},#{address})
     </insert> -->

    <!-- oracle
           在执行insert之前执行select 序列.nextval() from dual取出序列最大值，将值设置到user对象的id属性中
     -->
    <!--  <insert id="insertUser" parameterType="test.lx.mybatis.po.User">
        <selectKey keyProperty="id" order="BEFORE" resultType="int">
           select 序列.nextval() from dual
        </selectKey>
         INSERT INTO USER(username,birthday,sex,address) VALUES(#{username},#{birthday},#{sex},#{address})
     </insert> -->

    <!-- 用户删除 -->
    <delete id="deleteUser" parameterType="int">
	   delete from user where id=#{id}
	  </delete>
    <!-- 用户更新
        要求：传入的user对象包括id属性值
     -->
    <update id="updateUser" parameterType="com.soecode.lyf.entity.Userr">
	   update user set username = #{username},
	   birthday=#{birthday},sex=#{sex},address=#{address} where id=#{id}
	   </update>
</mapper>